#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
/* Zheyuan Gao */
#define MAXLINE 40 /* 40 chars per line, per command, should be enough. */
/** setup() reads in the next command line string stored in the input buffer.
separating it into distinct tokens using whitespace as delimiters. Setup
modifies the args parameter so that it holds pointers to the null-terminated
strings which are the tokens in the most recent user command line as well as a
NULL pointer, indicating the end of the argument list, which comes after the string
pointers that have been assigned to args.
**/
void setup(char inputBuff[], char *args[],int *background)
{
 int length, /* Num characters in the command line */
 i, /* Index for inputBuff arrray */
 j, /* Where to place the next parameter into args[] */
 start; /* Beginning of next command parameter */
 /* Read what the user enters */
 length = read(STDIN_FILENO, inputBuff, MAXLINE);
 j = 0;
 start = -1;
 if (length == 0)
 exit(0); /* Cntrl-d was entered, end of user command stream */
 if (length < 0){
 perror("error reading command");
exit(-1); /* Terminate with error code of -1 */
 }

 /* Examine every character in the input buffer */
 for (i = 0; i < length; i++) {
 switch (inputBuff[i]){
 case ' ':
 case '\t' : /* Argument separators */
 if(start != -1){
 args[j] = &inputBuff[start]; /* Set up pointer */
 j++;
 }
 inputBuff[i] = '\0'; /* Add a null char; make a C string */
 start = -1;
 break;
 case '\n': /* Final char examined */
 if (start != -1){
 args[j] = &inputBuff[start];
 j++;
 }
 inputBuff[i] = '\0';
 args[j] = NULL; /* No more arguments to this command */
 break;
 case '&':
 *background = 1;
 inputBuff[i] = '\0';
 break;

 default : /* Some other character */
 if (start == -1)
 start = i;
}
 }
 args[j] = NULL; /* Just in case the input line was > 50 */
}
int main(void)
{
 char inputBuff[MAXLINE]; /* Input buffer to hold the command entered */
 char *args[MAXLINE/2+1];/* Command line arguments */
 int background, status; /* Equals 1 if a command is followed by '&',
else 0 */

 pid_t ret_val; /* to hold value returned by fork */
 while (1){ /* Program terminates normally inside setup if
appropriate */
background = 0;
printf("CSE2431Sh$ "); /* Shell prompt */
 fflush(0);
 setup(inputBuff, args, &background); /* Get next command */
/* Fill in the code for these steps:
 (1) Fork a child process using fork(),
 (2) The child process will execute the command by invoking execvp(),
 (3) If bkgnd == 0, the parent will wait;
otherwise parent returns to top of loop to print the prompt
and call the setup() function. */
 ret_val = fork(); /* Create the child process */
 if (ret_val < 0) {
 /* Child process creation is failed*/
 printf("\nError in fork\n");
 exit(1);
 }
 else if(ret_val == 0) {
 /* Child exeutes the commands*/
 if (execvp(inputBuff, args) < 0) {
 /* The user enter the not supported command*/
 printf("\nCommand not supported.\n");
 }
 }
 else if (ret_val > 0) {
 if (background == 0) {
 /* The parent will wait until its child finish execute.*/
 waitpid(ret_val, &status, 0);
 }

 }
 }
}