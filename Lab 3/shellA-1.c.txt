/* STUDENT NAME: Zheyuan Gao */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#define MAXLINE 45 /* 45 chars per line, per command, is enough. */
/** The setup() routine reads in the next command line string storing it in the
input buffer.
The line is separated into distinct tokens using whitespace as delimiters. Setup
also
modifies the args parameter so that it holds points to the null-terminated strings
which
are the tokens in the most recent user command line as well as a NULL pointer,
indicating the
end of the argument list, which comes after the string pointers that have been
assigned to
args. ***/
void setup(char inputBuff[], char *args[],int *background, char commandCopy[], int
rerun)
{
 int length, /* Num characters in the command line */
 i, /* Index for inputBuff arrray */
 j, /* Where to place the next parameter into args[] */
 start; /* Beginning of next command parameter */
 if (!rerun){
 /* Read what the user enters */
 length = read(STDIN_FILENO, inputBuff, MAXLINE);

 /* Cppy the command from the inputBuff to commandCopy */
 strcpy(commandCopy, inputBuff);
 if (length == 0)
 exit(0); /* Cntrl-d was entered, end of user command stream
*/
 if (length < 0){
 perror("error reading command");
 exit(-1); /* Terminate with error code of -1 */
 }
 }
 /* Only use the command we pass in inputBuff by commandCopy */
 length = strlen(inputBuff);

 j = 0;
 start = -1;


 /* Examine every character in the input buffer */
 for (i = 0; i < length; i++) {
 switch (inputBuff[i]){
 case ' ':
 case '\t' : /* Argument separators */
 if(start != -1){
 args[j] = &inputBuff[start]; /* Set up pointer */
 j++;
 }
 inputBuff[i] = '\0'; /* Add a null char; make a C string */
 start = -1;
 break;
 case '\n': /* Final char examined */
 if (start != -1){
 args[j] = &inputBuff[start];
 j++;
 }
 inputBuff[i] = '\0';
 args[j] = NULL; /* No more arguments to this command */
 break;
 case '&':
 *background = 1;
 inputBuff[i] = '\0';
 break;

 default : /* Some other character */
 if (start == -1)
 start = i;
}
 }
 args[j] = NULL; /* Just in case the input line was > 40 */
}
/** The updateHistoryBuff() read the commandCopy and concatenate it to the end of
historyBuffer. If the history buffer already have 5 commands, the least recent
command will be removed. ***/
void updateHistoryBuff(char historyBuff[], char commandCopy[]){
 int index, i;
 char buffCopy[5 * MAXLINE];
 i = 0;
 if (numberOfCommand(historyBuff) == 5){
 /* Index will be the start of the second command */
 index = strcspn(historyBuff, "\n");
 index++;

 while(index<strlen(historyBuff)){
 /* Copy the rest of 4 commands in the buffCopy */
 buffCopy[i]=historyBuff[index];
 i++;
 index++;
 }
 /* Use etring opration to concatenate the new command */
 strcat(buffCopy,commandCopy);
 strcpy(historyBuff, buffCopy);

 }else{
 /* The command number is less than 5 */
 strcat(historyBuff, commandCopy);
 }
 /* Clear the commandCopy */
 memset(commandCopy,0,sizeof(commandCopy));
}
/** The printHistoryBuff() will output the most recent 5 user
commmands to the terminal. ***/
void printHistoryBuff(char historyBuff[]){
 char command[MAXLINE];
 int bufferIndex, commandIndex, i;
 bufferIndex = 0;
 commandIndex = 1;
 if(numberOfCommand(historyBuff) > 0){
 for(i = 0; i < strlen(historyBuff); i++){
 if(historyBuff[i] != '\n'){
 /* Read command character by character */
 command[bufferIndex] = historyBuff[i];
 bufferIndex++;
 }else{
 /* Reach the end of a command */
 command[bufferIndex] = '\0';
 printf("%i) %s\n", commandIndex, command);
 /* Reset the bufferIndex so it can start to take the next command.
 Update the command count */
 bufferIndex = 0;
 commandIndex++;
 }
 }
 }
}
/** The numberOfCommand() takes historyBuff as parameter and return the
number of commands currently in the historyBuff ***/
int numberOfCommand(char historyBuff[]){
 int amount, i;
 amount = 0;
 for(i = 0; i < strlen(historyBuff); i++){
 if(historyBuff[i] == '\n'){
 /* Command always end with a new line */
 amount++;
 }
 }
 return amount;
}
/** The readCommand() reads the command of given index in the historyBuffer
and put it in the inputBuffer for rr and r# commands to rerun the previous
commands ***/
void readCommand(char inputBuff[], char historyBuff[], int index){
 int commandIndex, i, bufferIndex;
 commandIndex = 1;
 bufferIndex = 0;
 i = 0;
 /* Clear the bad data in inputBuff */
 memset(inputBuff, 0, sizeof(inputBuff));
 while(commandIndex < index){
 if(historyBuff[i] == '\n'){
 commandIndex++;
 }
 /* i will be the start index of desired command */
 i++;
 }
 while(historyBuff[i] != '\n'){
 /* Copy the user command character by character */
 inputBuff[bufferIndex] = historyBuff[i];
 i++;
 bufferIndex++;
 }
 /* Append the newline at the end of command */
 inputBuff[bufferIndex] = '\n';

}
int main(void)
{
 char inputBuff[MAXLINE]; /* Input buffer to hold the command entered */
 char *args[MAXLINE/2+1];/* Command line arguments */
 int background; /* Equals 1 if a command is followed by '&', else 0 */
 char commandCopy[MAXLINE]; /* Array to store copy of command in setup function
*/
 char historyBuff[5*MAXLINE]; /* char buffer to hold up to 5 of the most
recently entered commands */
 int rerun = 0;

 while (1){ /* Program terminates normally inside setup */
background = 0;
pid_t pid;
printf("CS2431Sh$ "); /* Shell prompt */
 fflush(0);
 setup(inputBuff, args, &background, commandCopy, rerun); /* Get next
command */
 if(strcmp(args[0], "history") == 0 || strcmp(args[0], "h") == 0){
 /* User ask for output history command */
 printHistoryBuff(historyBuff);
 }else if(strcmp(args[0], "rr") == 0 || (args[0][0] == 'r' && isdigit(args[0]
[1]))){
 /* User uses the history rerun feature */
 rerun = 1;
 if(strcmp(args[0], "rr") == 0){
 /* InputBuff should have the most recent command */
 readCommand(inputBuff, historyBuff, numberOfCommand(historyBuff));
 }else{
 if(args[0][1] - 48 > numberOfCommand(historyBuff)){
 printf("Error: Given index is greater than the number of history
commands.\n");
 rerun = 0;
 }else{
 /* Read the desired command and store in inputBuff */
 readCommand(inputBuff, historyBuff, args[0][1] - 48);
 }
 }
 }else{
 if(!rerun){
 /* User input is new command */
 updateHistoryBuff(historyBuff, commandCopy);
 }else{
 /* Reset the rerun check */
 rerun = 0;
 }
 pid = fork();
 if (pid < 0) {
 printf ("ERROR: fork failed!\n");
 printf("Terminating shell\n");
 exit (0);
 }
 else if (pid == 0) {

 /* Child exeutes the commands*/
 if (execvp(inputBuff, args) < 0) {
 /* The user enter the not supported command*/
 printf("\nCommand not supported.\n");
 }
 }
 else {
 if (background == 0) waitpid(pid);
 }
 /* Clear the input buffer */
 memset(inputBuff, 0, sizeof(inputBuff));
 }
 }
}